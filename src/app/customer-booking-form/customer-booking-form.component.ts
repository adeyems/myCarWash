import {Component, OnInit} from "@angular/core";
import {RouterExtensions} from "nativescript-angular";
import * as moment from 'moment';
import { AuthService } from "~/app/services/auth.service";
import {ActivatedRoute} from "@angular/router";
import { DataService } from "../services/data.service";

@Component({
    selector: "Home",
    moduleId: module.id,
    templateUrl: "./customer-booking-form.component.html",
    styleUrls: ["./customer-booking-form.component.css"]
})
export class CustomerBookingFormComponent implements OnInit {
    isLoading = false;
    pageTitle: string;
    currentUser: string;

    customerId: string;
    customerFullName: string;
    currentBooking: any = [];
    selectedSlot: any;
    dateRange: any[] = [];
    timeSlots = [
        { timeSlot: '9:00 - 9:30' },
        { timeSlot:'9:30 - 10:00' },
        { timeSlot:'10:00 - 10:30' },
        { timeSlot:'10:30 - 11:00' },
        { timeSlot:'11:00 - 11:30' },
        { timeSlot:'11:30 - 12:00' },
        { timeSlot:'12:00 - 12:30' },
        { timeSlot:'12:30 - 13:00' },
        { timeSlot:'13:00 - 13:30' },
        { timeSlot:'13:30 - 14:00' },
        { timeSlot:'14:00 - 14:30' },
        { timeSlot:'14:30 - 15:00' },
        { timeSlot:'15:00 - 15:30' },
        { timeSlot:'15:30 - 16:00' },
        { timeSlot:'16:00 - 16:30' },
        { timeSlot:'16:30 - 17:00' },
        { timeSlot:'17:00 - 17:30' },
        { timeSlot:'17:30 - 18:00' }
    ];
    bookedSlot = {
        a: [],
        b: [],
        c: [],
        d: [],
        e: []
    };
    bookingDates = {
        a: [],
        b: [],
        c: [],
        d: [],
        e: []
    };

    requestCounter;

    constructor(
        private router: RouterExtensions,
        private authService: AuthService,
        private activatedRoute: ActivatedRoute,
        private dataService: DataService
    ) {
        this.activatedRoute.queryParams.subscribe( params => {
            this.currentUser = params["user"];
            console.log(this.currentUser);
        });
    }

    ngOnInit() {
        this.requestCounter = 0;
        this.dataService.getUserInfo('customers')
            .subscribe(res => {
                this.customerId = res[Object.keys(res)[0]].id;
                this.customerFullName = `${res[Object.keys(res)[0]].name} ${res[Object.keys(res)[0]].surname}`
                this.incrementRequestCounter();
            });



        this.autoGenerateDate();
        // this.onGetBookings();
        // this.onGetAllBookings();


    }

    onGetBookings() {
        this.dataService.getBookings().subscribe(response => {
            if (response) {
                // let lastBookingDate = response[Object.keys(response)[0]].bookedDate;
                for (let key in response) {
                    let bkdate = moment(response[key].bookedDate, ["YYYY-M-D"]);
                    let tdate = moment();
                    if (this.dateRange.indexOf(response[key].bookedDate) > -1 || bkdate.utc().valueOf() > tdate.utc().valueOf()) {
                        // this.bookingDates.push(response[key].bookedDate);
                        // this.bookingDates.push(response[key].timeSlot);
                        switch(response[key].bookedDay) {
                            case 1:
                                if (this.bookingDates.a.indexOf(response[key].timeSlot) < 0) {
                                    this.bookingDates.a.push(response[key].timeSlot);
                                }
                                break;
                            case 2:
                                if (this.bookingDates.b.indexOf(response[key].timeSlot) < 0) {
                                    this.bookingDates.b.push(response[key].timeSlot);
                                }
                                break;
                            case 3:
                                if (this.bookingDates.c.indexOf(response[key].timeSlot) < 0) {
                                    this.bookingDates.c.push(response[key].timeSlot);
                                }
                                break;
                            case 4:
                                if (this.bookingDates.d.indexOf(response[key].timeSlot) < 0) {
                                    this.bookingDates.d.push(response[key].timeSlot);
                                }

                                break;
                            case 5:
                                if (this.bookingDates.e.indexOf(response[key].timeSlot) < 0) {
                                    this.bookingDates.e.push(response[key].timeSlot);
                                }
                                break;
                            default:
                                break;
                        }
                        this.currentBooking.push(response[key]);
                    }
                }
            }

        }, error => {
        });
    }

    onGetAllBookings() {
        // this.requestCounter = 0;
        this.dataService.getAllBookings().subscribe(res => {
            let tempRes = res;
            console.log(this.customerId);
            delete tempRes[this.customerId];
            let userIds = Object.keys(tempRes);
            for (let i = 0; i < userIds.length; i++) {
                let userBookings = tempRes[userIds[i]];
                for (let key in userBookings) {
                    if (this.dateRange.indexOf(userBookings[key].bookedDate) > -1) {
                        switch(userBookings[key].bookedDay) {
                            case 1:
                                this.bookedSlot.a.push(userBookings[key].timeSlot);
                                break;
                            case 2:
                                this.bookedSlot.b.push(userBookings[key].timeSlot);
                                break;
                            case 3:
                                this.bookedSlot.c.push(userBookings[key].timeSlot);
                                break;
                            case 4:
                                this.bookedSlot.d.push(userBookings[key].timeSlot);
                                break;
                            case 5:
                                this.bookedSlot.e.push(userBookings[key].timeSlot);
                                break;
                            default:
                                break;
                        }
                    }
                }
                this.onGetBookings();
            }
        }, err => {
            alert(err);
        })
    }

    incrementRequestCounter() {
        this.requestCounter++;
        if (this.requestCounter === 1) {
            this.onGetAllBookings();
        }
    }

    onSelectSlot(date, day: 1 | 2 | 3 | 4 | 5, time: string, dayInLetter: 'c' | 'b' | 'c' | 'd' | 'e') {
        let tempDate = date;
        const slotStart = time.split('-')[0];
        if ((this.bookedSlot[dayInLetter].indexOf(time) > -1) || (moment().utc().valueOf() > moment(`${date} ${slotStart}`, ["YYYY-M-D HH:mm"]).utc().valueOf())) {
            alert('This slot is not available!');
            return;
        }
        if (this.currentBooking) {
            for (let i = 0; i < this.currentBooking.length; i++) {
                if (moment(date, ["YYYY-M-D"]).utc().valueOf() == moment(this.currentBooking[i].bookedDate, ["YYYY-M-D"]).utc().valueOf()) {
                    alert('You have a pending booking on this day.');
                    return;
                }
            }
        }

        let bookingObj = {
            bookedDate: date,
            bookedDay: day,
            timeSlot: time
        };
        this.selectedSlot = bookingObj;
    }

    onConfirmSlot() {
        if (!this.selectedSlot) {
            alert('Please select a time slot');
            return;
        }
        this.dataService.saveBooking(this.selectedSlot).subscribe(res => {
            alert('Slot Successfully Booked!');
            this.selectedSlot = null;
            this.onGetAllBookings();

        }, err => {
            alert(err);
        });
    }

    autoGenerateDate() {
        let mon = new Date().getMonth();
        let date = new Date().getDate();
        let yr = new Date().getFullYear();
        let day = new Date(yr, mon, date).getDay();
        let startDate;
        switch(day) {
            case 0:
                startDate = moment().add(1, 'days').format('YYYY-M-D');
                break;
            case 1:
                startDate = moment().format('YYYY-M-D');
                break;
            case 2:
                startDate = moment().subtract(1, 'days').format('YYYY-M-D');
                break;
            case 3:
                startDate = moment().subtract(2, 'days').format('YYYY-M-D');
                break;
            case 4:
                startDate = moment().subtract(3, 'days').format('YYYY-M-D');
                break;
            case 5:
                startDate = moment().subtract(4, 'days').format('YYYY-M-D');
                break;
            case 6:
                startDate = moment().add(2, 'days').format('YYYY-M-D');
                break;
            default:
                break;

        }
        this.dateRange.push(`${startDate}`);
        for (let i = 1; i < 5; i++) {
            let temp = moment(startDate, ["YYYY-M-D"]).add(i, 'days').format('YYYY-M-D');
            this.dateRange.push(`${temp}`);
        }
        console.log('_________', this.dateRange);
    }

    onLogout() {
        this.authService.logout();
    }
}
