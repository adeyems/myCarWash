import {Component, OnInit, ViewContainerRef} from "@angular/core";
import {RouterExtensions} from "nativescript-angular";
import * as dialogs from "tns-core-modules/ui/dialogs";
import * as moment from 'moment';
import { AuthService } from "~/app/services/auth.service";
import {ActivatedRoute} from "@angular/router";
import { DataService } from "../services/data.service";

@Component({
    selector: "Home",
    moduleId: module.id,
    templateUrl: "./manage-booking.component.html",
    styleUrls: ["./manage-booking.component.css"]
})
export class ManageBookingComponent implements OnInit {
    isLoading = false;
    pageTitle: string;
    public currentUser: string;
    customerFullName: string;
    currentBooking: any;
    selectedSlot: any;
    dateRange: any[] = [];
    timeSlots = [
        { timeSlot: '9:00 - 9:30' },
        { timeSlot:'9:30 - 10:00' },
        { timeSlot:'10:00 - 10:30' },
        { timeSlot:'10:30 - 11:00' },
        { timeSlot:'11:00 - 11:30' },
        { timeSlot:'11:30 - 12:00' },
        { timeSlot:'12:00 - 12:30' },
        { timeSlot:'12:30 - 13:00' },
        { timeSlot:'13:00 - 13:30' },
        { timeSlot:'13:30 - 14:00' },
        { timeSlot:'14:00 - 14:30' },
        { timeSlot:'14:30 - 15:00' },
        { timeSlot:'15:00 - 15:30' },
        { timeSlot:'15:30 - 16:00' },
        { timeSlot:'16:00 - 16:30' },
        { timeSlot:'16:30 - 17:00' },
        { timeSlot:'17:00 - 17:30' },
        { timeSlot:'17:30 - 18:00' }
    ];


    constructor(
        private router: RouterExtensions,
        private authService: AuthService,
        private activatedRoute: ActivatedRoute,
        private dataService: DataService
    ) {
        this.activatedRoute.queryParams.subscribe(params => {
            this.currentUser = params["user"];
            console.log('user: ', this.currentUser);
        });
    }

    ngOnInit() {
        this.dataService.getUserInfo('customers')
            .subscribe(res => {
                this.customerFullName = `${res[Object.keys(res)[0]].name} ${res[Object.keys(res)[0]].surname}`
            });

        this.dataService.getBookings().subscribe(response => {
            if (response) {
                this.currentBooking = response;
                this.selectedSlot = response[Object.keys(response)[0]];
            }
        }, error => {

        });

        this.autoGenerateDate();
    }

    // onSelectSlot(key: 'string', day: number, time: string) {
    //     let bookedDate = `${new Date().getFullYear()}-${new Date().getMonth()}-${new Date().getDate()}`;
    //     let bookingObj = {
    //         bookedDate: bookedDate,
    //         bookedDay: day,
    //         timeSlot: time
    //     };
    //     this.selectedSlot = bookingObj;
    // }

    autoGenerateDate() {
        let mon = new Date().getMonth();
        let date = new Date().getDate();
        let yr = new Date().getFullYear();
        let day = new Date(yr, mon, date).getDay();
        let startDate;
        switch(day) {
            case 0:
                startDate = moment().add(1, 'days').format('YYYY-M-D');
                break;
            case 1:
                startDate = moment().format('YYYY-M-D');
                break;
            case 2:
                startDate = moment().subtract(1, 'days').format('YYYY-M-D');
                break;
            case 3:
                startDate = moment().subtract(2, 'days').format('YYYY-M-D');
                break;
            case 4:
                startDate = moment().subtract(3, 'days').format('YYYY-M-D');
                break;
            case 5:
                startDate = moment().subtract(4, 'days').format('YYYY-M-D');
                break;
            case 6:
                startDate = moment().add(2, 'days').format('YYYY-M-D');
                break;
            default:
                break;

        }
        this.dateRange.push(`${startDate}`);
        for (let i = 1; i < 5; i++) {
            let temp = moment(startDate).add(i, 'days').format('YYYY-M-D');
            this.dateRange.push(`${temp}`);
        }
    }

    onCancelSlot() {
        let options = {
            title: "Cancel Booking",
            message: "Are you sure you want to cancel this booking?",
            okButtonText: "Yes",
            cancelButtonText: "No",
            neutralButtonText: "Cancel"
        };
        dialogs.confirm(options).then(result => {
            if (result) {
                this.dataService.deleteBooking(Object.keys(this.currentBooking)[0]).subscribe(res => {
                    this.selectedSlot = res;
                    this.currentBooking = null;
                    alert('Booking Successfully Cancelled!');
                }, err => {
                    alert(err);
                });
            }
        });

    }

    onLogout() {
        this.authService.logout();
    }
}
